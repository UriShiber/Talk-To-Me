package com.example.talktome;


import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;
import java.lang.System;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import java.net.Socket;
import java.net.UnknownHostException;


// for recording sound------------------
import android.os.Environment;
import android.media.MediaRecorder;
import android.media.MediaPlayer;
//--------------------------------------




public class MainActivity extends AppCompatActivity {
    // for record button --------------------------
    private boolean isPressed;
    private MediaRecorder myAudioRecorder;
    private String outputFile = null;
    private MediaPlayer mediaPlayer;
    private String result = "";
    TextView textView;

    // --------------------------------------------

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // run ------------------------------------------------------
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // permission -----------------------------------------------
        Permission p = new Permission(this);
        p.verifyPermission();
        //-----------------------------------------------------------
        // for record button ----------------------------------------
        ImageButton RecordButtonImage = findViewById(R.id.RecordButtonImage);
        textView = findViewById(R.id.textView);

        isPressed = false;

        // first time we click on the record button - start recording
        // second time we click on the record button - stop recording, send audio file to
        // the server and wait for a response
        // for recording --------------------------------------------
        myAudioRecorder = new MediaRecorder();
        //-----------------------------------------------------------
        // for playing ----------------------------------------------

        // ----------------------------------------------------------
        RecordButtonImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                mediaPlayer = new MediaPlayer();

                if (!isPressed) {
                    myAudioRecorder = new MediaRecorder();
                    myAudioRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
                    myAudioRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
                    myAudioRecorder.setAudioEncoder(MediaRecorder.OutputFormat.DEFAULT);
                    Toast.makeText(MainActivity.this, "starts recording...",
                        Toast.LENGTH_LONG).show();
                    // counter++;
                    String fileName = "/AudioRecording1.3gpp";
                    File file = new File((Environment.getExternalStorageDirectory().getAbsolutePath()
                            + fileName));
                    outputFile = file.getAbsolutePath();
                    //do recording
                    try {
                        myAudioRecorder.setOutputFile(outputFile);
                        myAudioRecorder.prepare();
                        myAudioRecorder.start();
                    } catch (IllegalStateException ise) {
                        ise.printStackTrace();
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    }
                    isPressed = true;

                } else {
                    try {
                        myAudioRecorder.stop();
                        myAudioRecorder.reset();
                        myAudioRecorder.release();
                        myAudioRecorder = null;
                    } catch (IllegalStateException ise) {
                        ise.printStackTrace();
                    } catch (RuntimeException rn) {
                        rn.printStackTrace();
                    }

                    try {
                        // play the recorded audio -------------------------------------
                        mediaPlayer.setDataSource(outputFile);
                        mediaPlayer.prepare();
                        mediaPlayer.start();
                        mediaPlayer = null;
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    // -------------------------------------------------------------
                    isPressed = false;
                    send(outputFile);

                }
            }

            private void send(String outputFile) {

                class myRunnable implements Runnable {
                    private String outputFile;

                    private myRunnable(String outputFile1){
                        outputFile = outputFile1;
                    }

                    public void run() {
                        /*
                        connects to the server
                        reads the fie that is given to a byte array
                        sends chunks of the byte array to the server
                        sends "uri" to the server to signal the end of the file
                        wait for the server's response
                         */
                        try {
                            Socket socket = new Socket("10.100.102.17", 80); // set a socket on the ip of the server and pre authorized port
                            InputStream is = socket.getInputStream();
                            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
                            FileInputStream fis;
                            int bytesToRead = 0;
                            byte[] my_byte_arr;
                            //-------------------------------
                            my_byte_arr = new byte[4096];
                            fis = new FileInputStream(outputFile);
                            int content;
                            content = fis.read(my_byte_arr); // read from the given file on the phone
                            while (content != -1) {
                                for (byte b : my_byte_arr) {
                                    out.write(b); // write its content to the socket and send to the server
                                }
                                content = fis.read(my_byte_arr);

                            }
                            out.writeChars("uri"); // signal the end of the file
                            out.flush();
                            // done sending
                            // waiting for response
                            byte[] bbb2;
                            byte[] bbb = new byte[1024];
                            while (bytesToRead == 0) {
                                // Read next message.
                                bytesToRead = is.read(bbb); // get the number of bytes that are
                                // needed to read from the socket and stores the bytes in bbb array
                                bbb2 = new byte[bytesToRead]; // the final byte array that stores only the wanted bytes
                                System.arraycopy(bbb, 0, bbb2, 0, bytesToRead);
                                result = new String(bbb2); // convert the byte arr to string
                                System.out.println(result);
                            }
                            is.close();
                            out.close();
                            socket.close();
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    textView.setText(result);
                                }
                                });
                        } catch (UnknownHostException e) {
                            System.out.println("dont recognize host");
                            e.printStackTrace();
                        } catch (IOException e) {
                            System.out.println("other err");
                            e.printStackTrace();
                        } catch (NegativeArraySizeException e) {
                            System.out.println("connection err");
                        }
                    }
                }
                System.out.println("in send");
                Thread myThread = new Thread(new myRunnable(outputFile));
                myThread.start();
            }
        });
    }
}

    
